sbp = df_subjects$sbp[i],
years_quit = years_quit,
FEV1 = FEV1_it
))
}
}
dat_all
library(dplyr)
library(ggplot2)
# time, treatment, FEV1
fev1_grouped <- dat_all %>%
group_by(time, treatment) %>%
summarise(
mean_fev1 = mean(FEV1, na.rm = TRUE),
sd_fev1 = sd(FEV1, na.rm = TRUE),
n = n(),
se_fev1 = sd_fev1 / sqrt(n),
.groups = "drop"
)
ggplot(fev1_grouped, aes(x = time, y = mean_fev1, color = factor(treatment))) +
geom_line(size = 1.2) +
geom_ribbon(aes(ymin = mean_fev1 - se_fev1, ymax = mean_fev1 + se_fev1, fill = factor(treatment)),
alpha = 0.2, color = NA) +
scale_color_manual(values = c("0" = "darkred", "1" = "darkgreen"),
labels = c("Control", "Treatment")) +
scale_fill_manual(values = c("0" = "red", "1" = "green"),
labels = c("Control", "Treatment")) +
labs(
title = "FEV1 Trend Over Time by Treatment Group",
x = "Time (Years)",
y = "FEV1 (Liters)",
color = "Group",
fill = "Group"
) +
theme_minimal(base_size = 14)
library(ggplot2)
library(dplyr)
# Step 1: 随机挑选 10 位受试者
set.seed(123)
sample_ids <- sample(unique(dat_all$id), 20)
# Step 2: 过滤数据
dat_sample <- dat_all %>%
filter(id %in% sample_ids) %>%
mutate(
treatment = factor(treatment, labels = c("Control", "Treatment")),
smoking = factor(smoking, labels = c("Non-Smoking", "Smoking"))
)
# Step 3: 绘图（每人一图，颜色区分 treatment，点形状标识 smoking 状态）
ggplot(dat_sample, aes(x = time, y = FEV1, group = id, color = treatment)) +
geom_line(size = 1) +
geom_point(aes(shape = smoking), size = 2.5) +
scale_shape_manual(values = c(1, 19)) +  # 空心圆 vs 实心圆
facet_wrap(~ id, ncol = 5) +
labs(
title = "Individual FEV1 Trajectories Over 5 Years",
subtitle = "Randomly Selected 10 Subjects",
x = "Time (Years)",
y = "FEV1 (Liters)",
color = "Treatment Group",
shape = "Smoking Status"
) +
theme_minimal(base_size = 14)
library(dplyr)
library(ggplot2)
# 获取 baseline 分组
baseline_group <- dat_all %>%
filter(time == 1) %>%
select(id, base_smoking = smoking, base_treatment = treatment)
dat_all_grouped <- dat_all %>%
left_join(baseline_group, by = "id") %>%
mutate(
group = factor(
paste0("Trt", base_treatment, "_Smk", base_smoking),
levels = c("Trt0_Smk0", "Trt0_Smk1", "Trt1_Smk0", "Trt1_Smk1"),
labels = c("Control, Non-Smoker", "Control, Smoker",
"Treatment, Non-Smoker", "Treatment, Smoker")
)
)
# 汇总均值和标准误
fev1_group_summary <- dat_all_grouped %>%
group_by(time, group) %>%
summarise(
mean_fev1 = mean(FEV1, na.rm = TRUE),
se_fev1 = sd(FEV1, na.rm = TRUE) / sqrt(n()),
.groups = "drop"
)
# 绘图
ggplot(fev1_group_summary, aes(x = time, y = mean_fev1, color = group, fill = group)) +
geom_line(size = 1.2) +
geom_ribbon(aes(ymin = mean_fev1 - se_fev1, ymax = mean_fev1 + se_fev1),
alpha = 0.2, color = NA) +
labs(
title = "FEV1 Trends Over Time by Baseline Treatment and Smoking Status",
x = "Time (Years)", y = "FEV1 (Liters)",
color = "Group", fill = "Group"
) +
theme_minimal(base_size = 14)
library(dplyr)
library(geepack)
library(broom)
# Step 2: Cross-Sectional（5 年份 OLS 模型）
mse_yearly <- numeric(5)
ols_summaries <- list()
cat("===== Cross-Sectional OLS Models by Year =====\n")
for (t in 1:5) {
data_t <- dat_all %>% filter(time == t)
fit_t <- lm(FEV1 ~ smoking +years_quit + treatment + age + gender + BMI + weight +
pack_years + cigs_per_day + sbp, data = data_t)
pred_t <- predict(fit_t, newdata = data_t)
mse_yearly[t] <- mean((data_t$FEV1 - pred_t)^2)
# 保存 summary
summary_df <- tidy(fit_t) %>%
mutate(across(where(is.numeric), ~ round(.x, 4)))
ols_summaries[[t]] <- summary_df
cat(paste0("\n--- Year ", t, " ---\n"))
print(summary_df)
}
# 平均 MSE（跨年度）
mse_cross_avg <- mean(mse_yearly)
cat("\nAverage MSE of 5 Cross-Sectional Models:", round(mse_cross_avg, 4), "\n\n")
#  GEE - Bootstrap PMSE
pmse_boot <- function(data, indices, corstr_type) {
subjects <- unique(data$id)
boot_subjects <- subjects[indices]
boot_data <- data[data$id %in% boot_subjects, ]
fit <- geeglm(FEV1 ~ smoking + treatment + age + gender + BMI + weight +
pack_years + cigs_per_day + sbp,
id = id, data = boot_data,
family = gaussian, corstr = corstr_type)
pred <- predict(fit, newdata = data)
mean((data$FEV1 - pred)^2)
}
set.seed(123)
B <- 50
n_subj <- length(unique(dat_all$id))
get_pmse <- function(corstr_type, data) {
boot_pmse <- replicate(B, {
boot_indices <- sample(1:n_subj, n_subj, replace = TRUE)
pmse_boot(data, boot_indices, corstr_type)
})
mean(boot_pmse)
}
pmse_ind <- get_pmse("independence", dat_all)
pmse_cs  <- get_pmse("exchangeable", dat_all)
pmse_ar1 <- get_pmse("ar1", dat_all)
pmse_results <- data.frame(
Model = c("Cross-Sectional (Avg of 5 OLS)", "GEE Independence", "GEE Exchangeable", "GEE AR-1"),
Error_Metric = c("MSE", "PMSE", "PMSE", "PMSE"),
Score = round(c(mse_cross_avg, pmse_ind, pmse_cs, pmse_ar1), 4)
)
print(pmse_results)
best_model <- pmse_results$Model[which.min(pmse_results$Score)]
cat("\n Best model based on prediction error is:", best_model, "\n")
fit_gee_ar1 <- geeglm(FEV1 ~ smoking + years_quit + treatment + age + gender + BMI + weight +
pack_years + cigs_per_day + sbp,
id = id, data = dat_all, family = gaussian, corstr = "independence")
gee_summary <- tidy(fit_gee_ar1) %>%
mutate(across(where(is.numeric), ~ round(.x, 4)))
cat("\nGEE Model Summary\n")
print(gee_summary)
best_model <- pmse_results$Model[which.min(pmse_results$Score)]
cat("\n Best model based on prediction error is:", best_model, "\n")
fit_gee_ar1 <- geeglm(FEV1 ~ smoking + years_quit + treatment + age + gender + BMI + weight +
pack_years + cigs_per_day + sbp,
id = id, data = dat_all, family = gaussian, corstr = "independence")
gee_summary <- tidy(fit_gee_ar1) %>%
mutate(across(where(is.numeric), ~ round(.x, 4)))
cat("\nGEE Model Summary\n")
print(gee_summary)
fit_gee_ar1 <- geeglm(FEV1 ~ smoking + years_quit + treatment + age + gender + BMI + weight +
pack_years + cigs_per_day + sbp,
id = id, data = dat_all, family = gaussian, corstr = "ar1")
gee_summary <- tidy(fit_gee_ar1) %>%
mutate(across(where(is.numeric), ~ round(.x, 4)))
cat("\nGEE Model Summary\n")
print(gee_summary)
library(ggplot2)
library(dplyr)
# 设定 smoking 和 treatment 为 factor 便于图形标签
dat_all_plot <- dat_all %>%
mutate(smoking = factor(smoking, labels = c("Non-Smoker", "Smoker")),
treatment = factor(treatment, labels = c("Control", "Treatment")),
time = factor(time, labels = paste("Year", 1:5)))
# 1. FEV1 vs Smoking (按年份分面)
ggplot(dat_all_plot, aes(x = smoking, y = FEV1, fill = smoking)) +
geom_boxplot(alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 20, size = 3, color = "black") +
facet_wrap(~ time, ncol = 3) +
labs(title = "FEV1 by Smoking Status Across Years",
x = "Smoking Status", y = "FEV1 (Liters)") +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
# 2. FEV1 vs Treatment (按年份分面)
ggplot(dat_all_plot, aes(x = treatment, y = FEV1, fill = treatment)) +
geom_boxplot(alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 20, size = 3, color = "black") +
facet_wrap(~ time, ncol = 3) +
labs(title = "FEV1 by Treatment Group Across Years",
x = "Treatment Group", y = "FEV1 (Liters)") +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
# Adapted PMSE simulation code for FEV1 longitudinal data
set.seed(123)
# 1. Function to simulate the FEV1 dataset using your generation logic
simulate_fev1_data <- function(N = 1000, T_time = 5,
beta0 = 2.4, beta_smoking = -0.15, beta_treat = 0.10,
beta_age = -0.02, beta_gender = 0.30, beta_BMI = -0.03,
beta_weight = 0.01, beta_packyears = -0.02,
beta_cigsday = -0.005, beta_sbp = -0.004,
sigma_b = 0.8, sigma_e = 1.0) {
# Baseline covariates
df_sub <- data.frame(
id = 1:N,
age = rnorm(N, 50, 10),
gender = rbinom(N, 1, 0.5),
BMI = rnorm(N, 25, 3),
weight = rnorm(N, 70, 10),
pack_years = rpois(N, 20),
cigs_per_day = rpois(N, 15),
sbp = rnorm(N, 120, 15),
treatment = rbinom(N, 1, 0.5),
b_i = rnorm(N, 0, sigma_b)
)
data_list <- vector("list", N * T_time)
idx <- 1
for (i in seq_len(N)) {
# baseline smoking with 60% probability
smoke <- numeric(T_time)
smoke[1] <- rbinom(1, 1, 0.6)
if (smoke[1] == 1 && runif(1) < 0.5) {
quit_year <- sample(2:T_time, 1)
smoke[quit_year:T_time] <- 0
} else if (smoke[1] == 0) {
smoke[2:T_time] <- rbinom(T_time - 1, 1, 0.4)
}
years_quit <- 0
pack_it <- df_sub$pack_years[i]
for (t in seq_len(T_time)) {
age_it <- df_sub$age[i] + (t - 1)
smoking_it <- smoke[t]
if (smoking_it == 1) {
years_quit <- 0
cigs_it <- rpois(1, df_sub$cigs_per_day[i])
pack_it <- pack_it + 1
} else {
years_quit <- years_quit + 1
cigs_it <- 0
}
quit_ben <- min(0.09 * years_quit, 0.19)
BMI_it <- df_sub$BMI[i] + rnorm(1, 0, 0.3)
wt_it  <- df_sub$weight[i] + rnorm(1, 0, 1)
mu <- beta0 +
beta_smoking   * smoking_it +
beta_treat     * df_sub$treatment[i] +
beta_age       * age_it +
beta_gender    * df_sub$gender[i] +
beta_BMI       * BMI_it +
beta_weight    * wt_it +
beta_packyears * pack_it +
beta_cigsday   * cigs_it +
beta_sbp       * df_sub$sbp[i] +
quit_ben +
df_sub$b_i[i]
Y_it <- rnorm(1, mu, sigma_e)
data_list[[idx]] <- data.frame(id       = i,
time     = t,
smoking  = smoking_it,
treatment= df_sub$treatment[i],
age      = age_it,
gender   = df_sub$gender[i],
BMI      = BMI_it,
weight   = wt_it,
pack_years    = pack_it,
cigs_per_day  = cigs_it,
sbp      = df_sub$sbp[i],
years_quit   = years_quit,
FEV1     = Y_it)
idx <- idx + 1
}
}
return(do.call(rbind, data_list))
}
# 2. PMSE bootstrap function for GEE
pmse_boot <- function(data, indices, cor_str) {
subjects <- unique(data$id)
boot_subjects <- subjects[indices]
boot_data <- data[data$id %in% boot_subjects, ]
fit <- geeglm(FEV1 ~ smoking + treatment + age + gender + BMI +
weight + pack_years + cigs_per_day + sbp + years_quit,
id = id, data = boot_data,
family = gaussian, corstr = cor_str)
pred <- predict(fit, newdata = data)
mean((data$FEV1 - pred)^2)
}
get_pmse <- function(data, cor_str, B = 25) {
n_subj <- length(unique(data$id))
pmse_vals <- replicate(B, {
ids <- sample(1:n_subj, n_subj, replace = TRUE)
pmse_boot(data, ids, cor_str)
})
mean(pmse_vals)
}
# 3. Simulation replicates to record best structure frequencies
library(geepack)
candidate_structures <- c("independence", "exchangeable", "ar1")
reps <- 100
selected <- character(reps)
for (r in seq_len(reps)) {
dat <- simulate_fev1_data(N = 100, T_time = 5)
pmse_vals <- sapply(candidate_structures, function(st) get_pmse(dat, st, B = 25))
selected[r] <- names(pmse_vals)[which.min(pmse_vals)]
}
cat("Frequency of selected working correlation structures:\n")
print(table(selected))
# —— 1. 前面步骤略：假定 simulate_fev1_data()、pmse_boot(), get_pmse() 已定义 —— #
# 4. 示例数据集
example_dat <- simulate_fev1_data(N = 100, T_time = 5)
# 5. 计算 PMSE 并输出表格
candidate_structures <- c("independence","exchangeable","ar1")
example_pmse <- sapply(candidate_structures,
function(st) get_pmse(example_dat, st, B = 25))
pmse_table <- data.frame(
Model = c("Independence","Exchangeable","AR-1"),
PMSE  = round(as.numeric(example_pmse), 4)
)
cat("PMSE for each working correlation structure (example):\n")
print(pmse_table)
# —— 6. 拟合三个 GEE 模型并输出 summary —— #
# 载入 broom 提取表格
library(broom)
# 拟合
fit_ind  <- geeglm(FEV1 ~ smoking + treatment + age + gender + BMI +
weight + pack_years + cigs_per_day + sbp + years_quit,
id = id, data = example_dat,
family = gaussian, corstr = "independence")
fit_cs   <- geeglm(FEV1 ~ smoking + treatment + age + gender + BMI +
weight + pack_years + cigs_per_day + sbp + years_quit,
id = id, data = example_dat,
family = gaussian, corstr = "exchangeable")
fit_ar1  <- geeglm(FEV1 ~ smoking + treatment + age + gender + BMI +
weight + pack_years + cigs_per_day + sbp + years_quit,
id = id, data = example_dat,
family = gaussian, corstr = "ar1")
# 提取并格式化
sum_ind <- tidy(fit_ind)  %>% mutate(across(where(is.numeric), ~ round(.x, 4)))
sum_cs  <- tidy(fit_cs)   %>% mutate(across(where(is.numeric), ~ round(.x, 4)))
sum_ar1 <- tidy(fit_ar1)  %>% mutate(across(where(is.numeric), ~ round(.x, 4)))
# 打印
cat("\n===== GEE Model Summaries =====\n")
cat("\n--- Independence Correlation ---\n")
print(sum_ind)
cat("\n--- Exchangeable Correlation ---\n")
print(sum_cs)
cat("\n--- AR-1 Correlation ---\n")
print(sum_ar1)
# —— 1. 前面步骤略：假定 simulate_fev1_data()、pmse_boot(), get_pmse() 已定义 —— #
# 4. 示例数据集
#example_dat <- simulate_fev1_data(N = 100, T_time = 5)
# 5. 计算 PMSE 并输出表格
candidate_structures <- c("independence","exchangeable","ar1")
example_pmse <- sapply(candidate_structures,
function(st) get_pmse(example_dat, st, B = 25))
pmse_table <- data.frame(
Model = c("Independence","Exchangeable","AR-1"),
PMSE  = round(as.numeric(example_pmse), 4)
)
cat("PMSE for each working correlation structure (example):\n")
print(pmse_table)
# —— 6. 拟合三个 GEE 模型并输出 summary —— #
# 载入 broom 提取表格
library(broom)
# 拟合
fit_ind  <- geeglm(FEV1 ~ smoking + treatment + age + gender + BMI +
weight + pack_years + cigs_per_day + sbp + years_quit,
id = id, data = dat_all,
family = gaussian, corstr = "independence")
fit_cs   <- geeglm(FEV1 ~ smoking + treatment + age + gender + BMI +
weight + pack_years + cigs_per_day + sbp + years_quit,
id = id, data = dat_all,
family = gaussian, corstr = "exchangeable")
fit_ar1  <- geeglm(FEV1 ~ smoking + treatment + age + gender + BMI +
weight + pack_years + cigs_per_day + sbp + years_quit,
id = id, data = dat_all,
family = gaussian, corstr = "ar1")
# 提取并格式化
sum_ind <- tidy(fit_ind)  %>% mutate(across(where(is.numeric), ~ round(.x, 4)))
sum_cs  <- tidy(fit_cs)   %>% mutate(across(where(is.numeric), ~ round(.x, 4)))
sum_ar1 <- tidy(fit_ar1)  %>% mutate(across(where(is.numeric), ~ round(.x, 4)))
# 打印
cat("\n===== GEE Model Summaries =====\n")
cat("\n--- Independence Correlation ---\n")
print(sum_ind)
cat("\n--- Exchangeable Correlation ---\n")
print(sum_cs)
cat("\n--- AR-1 Correlation ---\n")
print(sum_ar1)
# —— 1. 前面步骤略：假定 simulate_fev1_data()、pmse_boot(), get_pmse() 已定义 —— #
# 4. 示例数据集
#example_dat <- simulate_fev1_data(N = 100, T_time = 5)
# 5. 计算 PMSE 并输出表格
candidate_structures <- c("independence","exchangeable","ar1")
example_pmse <- sapply(candidate_structures,
function(st) get_pmse(data_t, st, B = 25))
pmse_table <- data.frame(
Model = c("Independence","Exchangeable","AR-1"),
PMSE  = round(as.numeric(example_pmse), 4)
)
cat("PMSE for each working correlation structure (example):\n")
print(pmse_table)
# —— 6. 拟合三个 GEE 模型并输出 summary —— #
# 载入 broom 提取表格
library(broom)
# 拟合
fit_ind  <- geeglm(FEV1 ~ smoking + treatment + age + gender + BMI +
weight + pack_years + cigs_per_day + sbp + years_quit,
id = id, data = dat_all,
family = gaussian, corstr = "independence")
fit_cs   <- geeglm(FEV1 ~ smoking + treatment + age + gender + BMI +
weight + pack_years + cigs_per_day + sbp + years_quit,
id = id, data = dat_all,
family = gaussian, corstr = "exchangeable")
fit_ar1  <- geeglm(FEV1 ~ smoking + treatment + age + gender + BMI +
weight + pack_years + cigs_per_day + sbp + years_quit,
id = id, data = dat_all,
family = gaussian, corstr = "ar1")
# 提取并格式化
sum_ind <- tidy(fit_ind)  %>% mutate(across(where(is.numeric), ~ round(.x, 4)))
sum_cs  <- tidy(fit_cs)   %>% mutate(across(where(is.numeric), ~ round(.x, 4)))
sum_ar1 <- tidy(fit_ar1)  %>% mutate(across(where(is.numeric), ~ round(.x, 4)))
# 打印
cat("\n===== GEE Model Summaries =====\n")
cat("\n--- Independence Correlation ---\n")
print(sum_ind)
cat("\n--- Exchangeable Correlation ---\n")
print(sum_cs)
cat("\n--- AR-1 Correlation ---\n")
print(sum_ar1)
summary(fit_ind)
summary(sum_cs)
summary(fit_ind)
summary(fit_ind)
summary(fit_cs)
summary(fit_ar1)
# 载入 QIC 计算函数
# geepack 包自带 QIC() 和 QICu() 方法
library(geepack)
# 假设你已经有了：
# fit_ind  — GEE with corstr = "independence"
# fit_cs   — GEE with corstr = "exchangeable"
# fit_ar1  — GEE with corstr = "ar1"
# 把它们放入列表
gee_fits <- list(
Independence  = fit_ind,
Exchangeable  = fit_cs,
AR1           = fit_ar1
)
# 计算 QIC 和 QICu
qic_vals  <- sapply(gee_fits, QIC)
qicu_vals <- sapply(gee_fits, QICu)
# 假设 fit_ind, fit_cs, fit_ar1 已拟合
library(geepack)
gee_fits <- list(
Independence  = fit_ind,
Exchangeable  = fit_cs,
AR1           = fit_ar1
)
# 只计算 QIC
qic_vals <- sapply(gee_fits, QIC)
qic_table <- data.frame(
Model = names(qic_vals),
QIC   = round(as.numeric(qic_vals), 4),
row.names = NULL
)
# 仅需运行一次
install.packages("QICpack")
library(QICpack)   # QICpack::QIC() & QICpack::QICu()
library(geepack)
library(MuMIn)
library(geepack)
library(MuMIn)
example_dat <- simulate_fev1_data(N = 100, T_time = 5)
fm_ind  <- geeglm(FEV1 ~ smoking + treatment + age + gender + BMI + weight +
pack_years + cigs_per_day + sbp + years_quit,
id = id, data = example_dat,
family = gaussian, corstr = "independence", scale.fix = TRUE)
fm_ex   <- update(fm_ind, corstr = "exchangeable")
fm_ar1  <- update(fm_ind, corstr = "ar1")
# 使用 MuMIn::model.sel 按 QIC 排序
mod_sel <- model.sel(fm_ind, fm_ex, fm_ar1, rank = MuMIn::QIC)
print(mod_sel)
# —— 2. 重复模拟 100 次，记录被选中的相关结构频次 —— #
set.seed(123)
reps <- 100
best_count <- c(Independence = 0, Exchangeable = 0, AR1 = 0)
for (r in seq_len(reps)) {
dat_sim <- simulate_fev1_data(N = 100, T_time = 5)
# 拟合三种结构
fm_ind  <- geeglm(FEV1 ~ smoking + treatment + age + gender + BMI + weight +
pack_years + cigs_per_day + sbp + years_quit,
id = id, data = dat_sim,
family = gaussian, corstr = "independence", scale.fix = TRUE)
fm_ex   <- update(fm_ind, corstr = "exchangeable")
fm_ar1  <- update(fm_ind, corstr = "ar1")
# 选最小 QIC
sel <- model.sel(fm_ind, fm_ex, fm_ar1, rank = MuMIn::QIC)
best <- rownames(sel)[1]
if (best == "fm_ind")  best_count["Independence"]  <- best_count["Independence"]  + 1
if (best == "fm_ex")   best_count["Exchangeable"]  <- best_count["Exchangeable"]  + 1
if (best == "fm_ar1")  best_count["AR1"]           <- best_count["AR1"]           + 1
}
cat("Frequency of selected working correlation structures over", reps, "replications:\n")
print(best_count)
